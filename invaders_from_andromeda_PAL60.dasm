;Copyright 2022 Cisano Carmelo
;
;This file is part of Invaders From Andromeda
;
;    Invaders From Andromeda is free software: you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation, either version 3 of the License, or
;    (at your option) any later version.
;
;    Invaders From Andromeda is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.
;
;    You should have received a copy of the GNU General Public License
;    along with Invaders From Andromeda.  If not, see <http://www.gnu.org/licenses/>.

	processor 6502
	include "vcs.h"
	include "macro.h"
	include "my_macro.h"
	include "energy_macro.h"
	include "joystick_macro.h"
	include "timer.h"
	
	
;===============================================================================
; Define Constants
;===============================================================================

Volume0 = 4
Volume1 = 6
LeftLimitSpaceShip = 30
RightLimitSpaceShip = 135
LeftLimitAliens = 28
RightLimitAliens = 160
ColorPlanet = $b2
ColorLandPlanet = $24
ColorOrizonPlanet = $d0
ColorMissiles = $2e
XPosGRP0Energia = $4c
ColorEnergyCounter = $0e
ColorEnergyCounterWhenOneIsLost = $00
WhereStop = 40
EndPointBallSpaceShip = 2
HeightInvader = 10
ColorBall = $9c
StartSpaceShip = 150
ColorLogo = $b8
MaxShields = 5
TimeForChangeScreen = 255
PreBarriers = 126
EndBarriers = 135
RedBarriers = $62
EnergySingleBarrier = 5
ColorEndGame = $66
LastLevelEndGame = 10
RightLimitBarriers = 56
LeftLimitBarriers = 40	


;===============================================================================
; Define Zero Page RAM Usage
;----------------------------------------
; ZP RAM variables can only be seen by the 6507 CPU.
; C variables can only be seen by the ARM CPU.
; The 4K Display Data bank is used for any variables both CPUs need access to.
;===============================================================================

        SEG.U VARS
        ORG $80             
        
 echo "----",($00FE - *) , "bytes of RAM left (space reserved for 2 byte stack)"

; dgs - use DS to define # of bytes for storage.
;       ShieldNumber will end up in $80
;       InvadersLine0 in $81
;       etc
	
ShieldNumber ds 1
InvadersLine0 ds 1
InvadersLine1 ds 1
InvadersLine2 ds 1
InvadersLine3 ds 1
InvadersLine4 ds 1
OffsetXInvaders ds 1
CoordXInvaders ds 1
CoordYInvaders ds 1
CursorLeftInvaders ds 1
CursorRightInvaders ds 1
CursorRowInvaders ds 1
CursorColumnInvaders ds 1
CursorSpringLeftRight ds 1
CursorYMissile1 ds 1
CursorYMissile2 ds 1
CoordXSpaceShip ds 1
CoordXUfo ds 1
PointerGRP0Low ds 1
PointerGRP0Hi ds 1
PointerGRP1Low ds 1
PointerGRP1Hi ds 1
PntrColorGRPLow ds 1
PntrColorGRPHi ds 1
PointerNumberLow ds 1
PointerNumberHi ds 1
PointerGFXPlanet ds 1
Temp ds 1
TempX ds 1
Tmp ds 1
TimerForAll ds 1
BooleanGameOver ds 1 ;if 0 then game over
BooleanAtBeginOfEveryLevel ds 1
BooleanShiftInvadersColumn ds 1
CursorYBallSpaceShip ds 1
CoordXBallSpaceShip ds 1
BooleanFireSpaceShip ds 1
BooleanHitInvader ds 1
BooleanFirePressed ds 1
UfoCollision ds 1
CollisionInvader ds 1

ArrayPointerGRP0Line0 ds 1
ArrayPointerGRP0Line1 ds 1
ArrayPointerGRP0Line2 ds 1
ArrayPointerGRP0Line3 ds 1
ArrayPointerGRP0Line4 ds 1
ArrayPointerGRP1Line0 ds 1
ArrayPointerGRP1Line1 ds 1
ArrayPointerGRP1Line2 ds 1
ArrayPointerGRP1Line3 ds 1
ArrayPointerGRP1Line4 ds 1

BooleanGRP1AllGone ds 1

CursorSound0 ds 1
CursorSound1 ds 1
TempoCH0 ds 1
TempoCH1 ds 1

MarchSequencer ds 1
TimerTitleScreen ds 1
ActiveInvadersLines ds 1

Bullet ds 1
TimerShiftInvadersColumn ds 1
StepBall ds 1
CurosorMaskInvaders ds 1
TimerMask ds 1
TotalInvaders ds 1
AlternateFrameInvader ds 1

PointerSpaceShipLow ds 1
PointerSpaceShipHi ds 1

CoordYMissile1 ds 1
CoordYMissile2 ds 1

TimerWhenInvaderStrike ds 1
CursorWhoBombs ds 1

CoordXMissile1 ds 1
CoordXMissile2 ds 1

BooleanNoBulletInGame ds 1
BooleanShieldLost ds 1

LevelNumber ds 1 ;incremented in FIND_HIT_INVADER_MACRO
LevelBarriers ds 1
PowerSingleBarrier ds 1
DefineBarriers ds 1
MaskDeleteBarrier ds 1

PointerGRP1UfoLow ds 1
PointerGRP1UfoHi ds 1

BooleanVictorySongCh1 ds 1

KindOfBarriers ds 1
Direction ds 1
CoordXBarries ds 1

SoundDataLow ds 1
SoundDataH ds 1
SoundMarchDataLow ds 1
SoundMarchDataHi ds 1

BooleanVictorySongCh0 ds 1
	
    SEG CODE
	org $f000

;---Graphics Data---
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FirstInvader0
	.byte $80 ; |X       |
	.byte $5B ; | X XX XX|
	.byte $3C ; |  XXXX  |
	.byte $5A ; | X XX X |
	.byte $FF ; |XXXXXXXX|
	.byte $FF ; |XXXXXXXX|
	.byte $42 ; | X    X |
	.byte $66 ; | XX  XX |
	.byte $08 ; |    X   |
	.byte $00 ; |        |
FirstInvader1
	.byte $42 ; | X    X |
	.byte $5A ; | X XX X |
	.byte $3C ; |  XXXX  |
	.byte $5A ; | X XX X |
	.byte $FF ; |XXXXXXXX|
	.byte $FF ; |XXXXXXXX|
	.byte $42 ; | X    X |
	.byte $66 ; | XX  XX |
	.byte $10 ; |   X    |
	.byte $00 ; |        |
SecondInvader0
	.byte $81 ; |X      X|
	.byte $C3 ; |XX    XX|
	.byte $A5 ; |X X  X X|
	.byte $DB ; |XX XX XX|
	.byte $DB ; |XX XX XX|
	.byte $FF ; |XXXXXXXX|
	.byte $7E ; | XXXXXX |
	.byte $A5 ; |X X  X X|
	.byte $24 ; |  X  X  |
	.byte $00 ; |        |
SecondInvader1
	.byte $81 ; |X      X|
	.byte $E7 ; |XXX  XXX|
	.byte $A5 ; |X X  X X|
	.byte $DB ; |XX XX XX|
	.byte $DB ; |XX XX XX|
	.byte $FF ; |XXXXXXXX|
	.byte $7E ; | XXXXXX |
	.byte $A5 ; |X X  X X|
	.byte $81 ; |X      X|
	.byte $00 ; |        |
ThirdInvader0
	.byte $66 ; | XX  XX |
	.byte $24 ; |  X  X  |
	.byte $7E ; | XXXXXX |
	.byte $99 ; |X  XX  X|
	.byte $DB ; |XX XX XX|
	.byte $DB ; |XX XX XX|
	.byte $7E ; | XXXXXX |
	.byte $3C ; |  XXXX  |
	.byte $AA ; |X X X X |
	.byte $00 ; |        |
ThirdInvader1
	.byte $2C ; |  X XX  |
	.byte $24 ; |  X  X  |
	.byte $7E ; | XXXXXX |
	.byte $99 ; |X  XX  X|
	.byte $DB ; |XX XX XX|
	.byte $FF ; |XXXXXXXX|
	.byte $7E ; | XXXXXX |
	.byte $3C ; |  XXXX  |
	.byte $55 ; | X X X X|
	.byte $00 ; |        |
ForthInvader0
	.byte $42 ; | X    X |
	.byte $7E ; | XXXXXX |
	.byte $7E ; | XXXXXX |
	.byte $7E ; | XXXXXX |
	.byte $3C ; |  XXXX  |
	.byte $FF ; |XXXXXXXX|
	.byte $18 ; |   XX   |
	.byte $81 ; |X      X|
	.byte $81 ; |X      X|
	.byte $00 ; |        |
ForthInvader1
	.byte $E7 ; |XXX  XXX|
	.byte $BD ; |X XXXX X|
	.byte $BD ; |X XXXX X|
	.byte $FF ; |XXXXXXXX|
	.byte $3C ; |  XXXX  |
	.byte $7E ; | XXXXXX |
	.byte $18 ; |   XX   |
	.byte $42 ; | X    X |
	.byte $42 ; | X    X |
	.byte $00 ; |        |
FifthInvader0
	.byte $99 ; |X  XX  X|
	.byte $A5 ; |X X  X X|
	.byte $FF ; |XXXXXXXX|
	.byte $B5 ; |X XX X X|
	.byte $3C ; |  XXXX  |
	.byte $3C ; |  XXXX  |
	.byte $24 ; |  X  X  |
	.byte $2E ; |  X XXX |
	.byte $70 ; | XXX    |
	.byte $00 ; |        |
FifthInvader1
	.byte $18 ; |   XX   |
	.byte $24 ; |  X  X  |
	.byte $BD ; |X XXXX X|
	.byte $EF ; |XXX XXXX|
	.byte $BD ; |X XXXX X|
	.byte $3C ; |  XXXX  |
	.byte $24 ; |  X  X  |
	.byte $74 ; | XXX X  |
	.byte $0E ; |    XXX |
	.byte $00 ; |        |
SixthInvader0
	.byte $6A ; | XX X X |
	.byte $81 ; |X      X|
	.byte $99 ; |X  XX  X|
	.byte $BD ; |X XXXX X|
	.byte $24 ; |  X  X  |
	.byte $BD ; |X XXXX X|
	.byte $99 ; |X  XX  X|
	.byte $81 ; |X      X|
	.byte $56 ; | X X XX |
	.byte $00 ; |        |
SixthInvader1
	.byte $6A ; | XX X X |
	.byte $C3 ; |XX    XX|
	.byte $5A ; | X XX X |
	.byte $7E ; | XXXXXX |
	.byte $99 ; |X  XX  X|
	.byte $7E ; | XXXXXX |
	.byte $5A ; | X XX X |
	.byte $C3 ; |XX    XX|
	.byte $56 ; | X X XX |
	.byte $00 ; |        |
SeventhInvader0
	.byte $24 ; |  X  X  |
	.byte $5A ; | X XX X |
	.byte $5A ; | X XX X |
	.byte $7E ; | XXXXXX |
	.byte $7E ; | XXXXXX |
	.byte $7E ; | XXXXXX |
	.byte $99 ; |X  XX  X|
	.byte $4A ; | X  X X |
	.byte $89 ; |X   X  X|
	.byte $00 ; |        |
SeventhInvader1
	.byte $66 ; | XX  XX |
	.byte $DB ; |XX XX XX|
	.byte $7E ; | XXXXXX |
	.byte $FF ; |XXXXXXXX|
	.byte $7E ; | XXXXXX |
	.byte $99 ; |X  XX  X|
	.byte $4A ; | X  X X |
	.byte $52 ; | X X  X |
	.byte $81 ; |X      X|
	.byte $00 ; |        |
EighthInvader0
	.byte $42 ; | X    X |
	.byte $BD ; |X XXXX X|
	.byte $FF ; |XXXXXXXX|
	.byte $DB ; |XX XX XX|
	.byte $7E ; | XXXXXX |
	.byte $7E ; | XXXXXX |
	.byte $5A ; | X XX X |
	.byte $49 ; | X  X  X|
	.byte $94 ; |X  X X  |
	.byte $00 ; |        |
EighthInvader1
	.byte $81 ; |X      X|
	.byte $BD ; |X XXXX X|
	.byte $FF ; |XXXXXXXX|
	.byte $5A ; | X XX X |
	.byte $7E ; | XXXXXX |
	.byte $7E ; | XXXXXX |
	.byte $5A ; | X XX X |
	.byte $92 ; |X  X  X |
	.byte $29 ; |  X X  X|
	.byte $00 ; |        |
NinethInvader0
	.byte $99 ; |X  XX  X|
	.byte $B5 ; |X XX X X|
	.byte $DB ; |XX XX XX|
	.byte $EF ; |XXX XXXX|
	.byte $BD ; |X XXXX X|
	.byte $1C ; |   XXX  |
	.byte $B5 ; |X XX X X|
	.byte $30 ; |  XX    |
	.byte $B1 ; |X XX   X|
	.byte $00 ; |        |
NinethInvader1
	.byte $99 ; |X  XX  X|
	.byte $AD ; |X X XX X|
	.byte $DB ; |XX XX XX|
	.byte $EF ; |XXX XXXX|
	.byte $BD ; |X XXXX X|
	.byte $38 ; |  XXX   |
	.byte $AD ; |X X XX X|
	.byte $0D ; |    XX X|
	.byte $0C ; |    XX  |
	.byte $00 ; |        |
TenthInvader0
	.byte $24 ; |  X  X  |
	.byte $7E ; | XXXXXX |
	.byte $56 ; | X X XX |
	.byte $FF ; |XXXXXXXX|
	.byte $BC ; |X XXXX  |
	.byte $3D ; |  XXXX X|
	.byte $A4 ; |X X  X  |
	.byte $2F ; |  X XXXX|
	.byte $F0 ; |XXXX    |
	.byte $00 ; |        |
TenthInvader1
	.byte $41 ; | X     X|
	.byte $7E ; | XXXXXX |
	.byte $6A ; | XX X X |
	.byte $FF ; |XXXXXXXX|
	.byte $3D ; |  XXXX X|
	.byte $BC ; |X XXXX  |
	.byte $25 ; |  X  X X|
	.byte $F4 ; |XXXX X  |
	.byte $0F ; |    XXXX|
InvaderGhost
	.byte $00 ; |        |

	.byte $00 ; |        |
	.byte $00 ; |        |
	.byte $00 ; |        |
	.byte $00 ; |        |
	.byte $00 ; |        |
	.byte $00 ; |        |
	.byte $00 ; |        |
	.byte $00 ; |        |
	.byte $00 ; |        |
;Colors
FirstInvaderColor
    .byte $7e
	.byte $7e
	.byte $7e
	.byte $7e
	.byte $58
	.byte $58
	.byte $56
	.byte $56
	.byte $5c
SecondInvaderColor
	.byte $44
	.byte $46
	.byte $46
	.byte $48
	.byte $48
	.byte $48
	.byte $2a
	.byte $2c
	.byte $2e
ThirdInvaderColor
	.byte $26
	.byte $28
	.byte $2a
	.byte $2e
	.byte $2e
	.byte $2e
	.byte $2e
	.byte $28
	.byte $2a
ForthInvaderColor
	.byte $a4
	.byte $a6
	.byte $a6
	.byte $a6
	.byte $a4
	.byte $a8
	.byte $a8
	.byte $a8
	.byte $a8
	.byte ColorMissiles ;color of grp1 missile and missile1
FifthInvaderColor
	.byte $98
	.byte $98
	.byte $98
	.byte $b4
	.byte $b4
	.byte $96
	.byte $96
	.byte $98
	.byte $98
	.byte ColorMissiles ;nice trick, grp1 missile and missile1 color
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TablePtrNumbLow
	.byte <Number0, <Number1, <Number2, <Number3, <Number4, <Number5
TablePtrNumbHi
	.byte >Number0, >Number1, >Number2, >Number3, >Number4, >Number5
TablePntrInvadersFrame0Low
	.byte <FirstInvader0, <SecondInvader0, <ThirdInvader0, <ForthInvader0, <FifthInvader0
	.byte <SixthInvader0, <SeventhInvader0, <EighthInvader0, <NinethInvader0, <TenthInvader0, <InvaderGhost
TablePntrInvadersFrame1Low
	.byte <FirstInvader1, <SecondInvader1, <ThirdInvader1, <ForthInvader1, <FifthInvader1
	.byte <SixthInvader1, <SeventhInvader1, <EighthInvader1, <NinethInvader1, <TenthInvader1, <InvaderGhost
TablePntrInvadersFrame0Hi
	.byte >FirstInvader0, >SecondInvader0, >ThirdInvader0, >ForthInvader0, >FifthInvader0
	.byte >SixthInvader0, >SeventhInvader0, >EighthInvader0, >NinethInvader0, >TenthInvader0, >InvaderGhost
TablePntrInvadersFrame1Hi
	.byte >FirstInvader0, >SecondInvader0, >ThirdInvader0, >ForthInvader0, >FifthInvader0
	.byte >SixthInvader0, >SeventhInvader0, >EighthInvader0, >NinethInvader0, >TenthInvader0, >InvaderGhost

TableColorInvadersLow
	.byte <FirstInvaderColor, <SecondInvaderColor, <ThirdInvaderColor, <ForthInvaderColor, <FifthInvaderColor
TableColorInvadersHi
	.byte >FirstInvaderColor, >SecondInvaderColor, >ThirdInvaderColor, >ForthInvaderColor, >FifthInvaderColor
TableSoundsLow
	.byte <InvadersMarch, <Fire, <InvaderExplosion, <UfoHit, <SpaceShipHit, <VictorySongCh0, <VictorySongCh1
TableSoundsHi
	.byte >InvadersMarch, >Fire, >InvaderExplosion, >UfoHit, >SpaceShipHit, >VictorySongCh0, >VictorySongCh1

TableNusiz
		  ;0    1    2    3    4    5    6    7
	.byte 0, 0,  0,  1,  0,  2,  1,  3
TableOffsetInvaders
	.byte 0, 32, 16, 16, 0, 0, 0, 0 ;for NUSIZX
TableOffsetInvadersGRP1
	.byte 48, 80, 64, 64, 48, 48, 48, 48
TableTimerBombing
	.byte 126, 90, 70, 60
TableCoordXMissile
	.byte 78, 62, 46, 30, 14, $fd;.byte 80, 64, 48, 32, 16, 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
Start
	CLEAN_START
	
initializingMainVariables
	;when turns on...
	;draw logo	
	lda #TimeForChangeScreen
	sta TimerTitleScreen
	;set Volumes to 0 for no sound when reset is pressed
	lda #0
	sta AUDV0
	sta AUDV1
	;define some pointers
	lda #>SpaceShip0
	sta PointerSpaceShipHi
	lda TableColorInvadersHi
	sta PntrColorGRPHi

	lda #<Ufo
	sta PointerGRP1UfoLow
	lda #>Ufo
	sta PointerGRP1UfoHi
	
	lda #$36
	sta KindOfBarriers

	lda #>FirstInvader0
	sta PointerGRP0Hi
	sta PointerGRP1Hi
	;define playfiend features
	lda #1
	sta CTRLPF ;Playfield mirror 1+0 GRP has priority over PF
	sta Direction
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
NextFrame
	VERTICAL_SYNC

	sta HMCLR

	;set zero Cursor
	;lda #0
	sta CursorRowInvaders

verifyReset
	lsr SWCHB ;test Game Reset switch
	bcs setTimer ;reset?
	jmp Start

setTimer
	lda #45 ;37 lines x 76 cycles per line = 2812 cycles / 64 = 43
	sta TIM64T

increaseMyTimers
	;increase Timer for every thing in the game
	inc TimerForAll
	inc TimerShiftInvadersColumn

checkGameCompleted
	lda LevelNumber
	cmp #LastLevelEndGame
	bne checkForTitleScreen
	jmp drawLogo

checkForTitleScreen
	lda TimerTitleScreen ;first start has the value for the logo screen
	cmp #TimeForChangeScreen
	bne increaseTimerTitleScreen
	jmp drawLogo

increaseTimerTitleScreen
	lda BooleanGameOver
	bne setZeroSomeVariables
	inc TimerTitleScreen ;increase timer

setZeroSomeVariables
	lda BooleanAtBeginOfEveryLevel
	bne setFrameSpaceShip ;no firt start
;only at the first start and at change level
InitializeValues
	lda #0
	sta CursorSound0
	sta TempoCH0

	lda #82
	sta CoordXSpaceShip ;center of the screen - relatively speaking

	lda #%11111100 ;252
	sta MaskDeleteBarrier

	lda #MaxShields
	ldx LevelNumber ;if the game is going, no shields are modified
	bne .gameInProgress ;otherwhise, the shields are restored
	sta ShieldNumber
	sta CoordXUfo
	sta BooleanGameOver
	lda #48
	sta CoordXBarries
	lda #1
	sta StepBall
.gameInProgress
	lda #%10101010
	sta DefineBarriers
	sta LevelBarriers

	lda #%00100000
	sta CursorLeftInvaders
	lda #%00000001
	sta CursorRightInvaders
	sta BooleanAtBeginOfEveryLevel
	sta CursorWhoBombs
	lda #2
	sta CursorSpringLeftRight

	lda #40 ;coordinate where invaders start
	sta CoordXInvaders
	lda #96
	sta OffsetXInvaders ;relative coordinate last invader
	
	lda #%00111111
	sta InvadersLine0
	sta InvadersLine1
	sta InvadersLine2
	sta InvadersLine3
	sta InvadersLine4

	lda #12
	sta CoordYInvaders

	sta PowerSingleBarrier ;every barrier shield

	lda #152
	sta CursorYBallSpaceShip

	lda #%00011111
	sta TimerMask
	lda #31 ;1 more for a best sound when 1 invader remains
	sta TotalInvaders

	lda #140
	sta CoordYMissile1
	sta CoordYMissile2

	sta CoordXMissile2 ;must not under 15 - necessary for the positionig routine at the first time
	sta BooleanNoBulletInGame
	sta TimerWhenInvaderStrike ;to delete
;end InitializeValues

;alternate frame of SpaceShip
setFrameSpaceShip
	ldy #<SpaceShip0
	lda TimerForAll
	and #%00000010
	bne storeSpaceShipPointer
	ldy #<SpaceShip1
storeSpaceShipPointer
	sty PointerSpaceShipLow

manageTimers
	;TIMER_INVADERS_BOMBING
	;before spaceship and aliens can shot
	lda BooleanNoBulletInGame
	beq postNoBulletInGame
	dec BooleanNoBulletInGame
postNoBulletInGame
	lda TimerMask
	bne decrementTimer
	lda TotalInvaders
	sta TimerMask
	jmp manageCollisionBallUfo
decrementTimer
	dec TimerMask
;end manageTimer

manageCollisionBallUfo
	lda UfoCollision
	beq noCollisionBallUfo

increaseShield
	lda ShieldNumber
	cmp #MaxShields
	bpl noIncreaseShield
	inc ShieldNumber
noIncreaseShield
	jsr ResetBallMissileGRP0
	jmp checkJoystick

noCollisionBallUfo
	lda BooleanFireSpaceShip
	beq checkJoystick
	lda CursorYBallSpaceShip
	cmp #EndPointBallSpaceShip ;arrived at the end of the missile path=ball arrived at the top of the screen
	bne incrementBallMissile
	jsr ResetBallMissileGRP0
	jmp checkJoystick

incrementBallMissile
	;increment pointer ball/missile SpaceShip
	;only if BooleanFireSpaceShip is true
	;1 pixel one frame, 2 pixel next frame = 3 pixel in 2 frames
	lda TimerForAll
	and #%00000001
	beq .stepOne
	lda CursorYBallSpaceShip
	sbc StepBall ;1 or 2 pixel set at alternate level
	jmp .stepTwo
.stepOne
	lda CursorYBallSpaceShip
	sbc #1
.stepTwo
	sta CursorYBallSpaceShip

checkJoystick
	JOYSTICK_MACRO

checkHitInvader
	FIND_HIT_INVADER_MACRO

	lda InvadersLine0
	ora InvadersLine1
	ora InvadersLine2
	ora InvadersLine3
	ora InvadersLine4
	;sta Temp
	and CurosorMaskInvaders ;set inside FIND_HIT_INVADER_MACRO
	beq .setBooleanToFalse

	lda BooleanShiftInvadersColumn
	beq checkGameOver
	lda TimerShiftInvadersColumn ;delay the shift of the column
	bne checkGameOver ;if timer!=0

;shift column of aliens
	ldy #$05
shiftColumn
	dey ;start from 4
	lda InvadersLine0,y ;the hit invader can be everywhere
	and CurosorMaskInvaders
	bne shiftColumn ;loop for to find where is the alien missing
	lda CurosorMaskInvaders
	ora InvadersLine0,y
	sta InvadersLine0,y ;fill the last line

	ldy #$ff
.setColumn
	iny ;start from 0
	lda InvadersLine0,y
	and CurosorMaskInvaders
	beq .setColumn ;loop until finds the line with the invader to delete

	lda InvadersLine0,y
	eor CurosorMaskInvaders ;it is deleted
	sta InvadersLine0,y ;new line generated
.setBooleanToFalse
	lda #0
	sta BooleanShiftInvadersColumn
;end shift column

checkGameOver
	lda ShieldNumber
	sta BooleanGameOver
	bne checkNoMoreInvaders
	;set gameover
checkNoMoreInvaders
	lda InvadersLine0
	ora InvadersLine1
	ora InvadersLine2
	ora InvadersLine3
	ora InvadersLine4
	sta Temp
	;end level
	bne defLeftXInvaders
	jmp letInvadersBombing
	;end level
defLeftXInvaders
	and CursorLeftInvaders
	bne defRightXInvaders
newLeftX
	;InvaderLineX = 00011111
	;the first column is gone
	;asl InvaderLineX = 00111110
	;all invaders are shifted on the left
	;CoordXInvaders+16
	;for continue to show in the right position
	asl InvadersLine0
	asl InvadersLine1
	asl InvadersLine2
	asl InvadersLine3
	asl InvadersLine4

	lda CoordXInvaders
	adc #16
	sta CoordXInvaders
	jmp checkNoMoreInvaders
;check the right column. If !=0 the new coloumn and X coordinate are the next - offset of -16px
defRightXInvaders
	lda Temp ;ORA operation above
	and CursorRightInvaders
	bne noNewX
newRightX
	asl CursorRightInvaders
	lda OffsetXInvaders ;for check right limits
	sbc #16
	sta OffsetXInvaders
	jmp defRightXInvaders
noNewX
	;check in GRP1 is alla gone for set the same X coordinate of GRP0 
	lda Temp
	and #%00000111
	sta BooleanGRP1AllGone

loadPointersInvaders
	LOAD_POINTERS_INVADERS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
moveInvaders
	lda TimerMask
	bne letInvadersBombing
.checkLeft
	lda CoordXInvaders
	cmp #LeftLimitAliens ;if 0 changes direction
	bpl .checkRight;bne .checkRight
	lda #2
	sta CursorSpringLeftRight
	jmp .doIt
.checkRight
	;lda CoordXInvaders ;loaded above
	adc OffsetXInvaders
	cmp #RightLimitAliens ;when 0 changes direction
	bmi .doIt
	lda #$fe ;-2
	sta CursorSpringLeftRight
.doIt
	lda CursorSpringLeftRight
	clc
	adc CoordXInvaders
	sta CoordXInvaders ;this variable can stuck the invaders
	;alternate frame animation of the invaders
	lda AlternateFrameInvader
	eor #1
	sta AlternateFrameInvader
	;alternate frame animation of the invaders
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

letInvadersBombing
	TIMER_INVADERS_BOMBING

setSpeedUfo
	lda TimerForAll
	and #%00000001 ;it moves at alternate frames
	bne prePositionUfo
	inc CoordXUfo ;set speed of Ufo 1px every 2 frames
prePositionUfo
	lda CoordXUfo
	cmp #160
	bne setPositionUfo
	lda #0
	sta CoordXUfo
setPositionUfo
	ldy #1 ;parameter (GRP1) for subroutine
	jsr PositionElement

setPositionBall
	lda CoordXBallSpaceShip
	ldy #4 ;parameter (BALL) for subroutine - it is used as missile for the spaceship
	jsr PositionElement

setPositionMissile1
	lda CoordXMissile1
	ldy #3 ;parameter (MISSILE1) for subroutine
	jsr PositionElement

setPositionBarriers
	lda CoordXBarries
	ldy #2 ;parameter (MISSILE0) for subroutine
	jsr PositionElement

;;;;;;;;;;;;;;
Loop
	lda INTIM
	bne Loop

; Disable VBLANK
	lda #$0
	sta VBLANK
;last line before of scanloop

;Draw the 192 scanlines
	ldx #3

	sta CXCLR
	sta WSYNC ;wait for next scanline
	sta HMOVE

	ldy #0
;kernel grafico
drawUfo
	inx
	DRAWBALL_WITHOUT_STA_MACRO2
	DRAW_GRP1_UFO_MACRO
	cpx CoordYInvaders;#12 - start invaders
	bne drawUfo
	;get collision GRP1 - BALL
	lda #%01000000
	and CXP1FB
	sta UfoCollision

	sta CXCLR

setInvaders
	sta WSYNC
	inx
	DRAWBALL_MACRO2
	inx
	DRAWBALL_WITHOUT_STA_MACRO2

	inx ;for the drawball after stawsync used in positionGRP0

	sta HMCLR
	sta WSYNC
	sta ENABL

	DRAWBALL_WITHOUT_STA_MACRO2

	ldy CursorRowInvaders
copiesOfInvaders
	lda InvadersLine0,y
	lsr
	lsr
	lsr
	;and #%00000111
	tay
	lda TableNusiz,y
	sta NUSIZ0
	clc
	lda CoordXInvaders ;position - parameter for subroutine
	adc TableOffsetInvaders,y

positionGRP0
	sec
	sta WSYNC ;start a new line
		; one cycle of .DivideLoopGRP0 is saved
		sbc #15
		;;;;;;;;;;;;;
		;and the saved cycle is used for these
		ldy Bullet
		sty ENABL
		;;;;;;;;;;;;;
.DivideLoopGRP0
	sbc #15	;subtract 15
	bcs .DivideLoopGRP0	;branch until negative
	eor #7	;calculate fine offset
	asl
	asl
	asl
	asl
	sta RESP0	;fix coarse position
	sta HMP0
endPositionGRP0
	;inx ;incremented above

	inx ;used after sta wsync
	sta WSYNC

	DRAWBALL_MACRO2

	inx ;anticipate inx in positioGRP1
	DRAWBALL_WITHOUT_STA_MACRO2

	ldy CursorRowInvaders
	lda InvadersLine0,y
	and #%00000111
	tay
	lda TableNusiz,y
	sta NUSIZ1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	lda BooleanGRP1AllGone
	bne someInvaders
	lda CoordXInvaders ;if GRP1 is empty, set same GRP0 coordinate
	jmp positionGRP1

someInvaders
	;end add
	clc
	lda CoordXInvaders
	;adc #48 ;offset position after GRP0 - not necessary anymore because I created TableOffsetInvadersGRP1
	adc TableOffsetInvadersGRP1,y ;parameter for subroutine

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
positionGRP1
	;ldy Tmp
	sec
	sta WSYNC ;start a new line
		;one cycle of .DivideLoopGRP0 is saved
		sbc #15;sty ENABL
		;;;;;;;;;;;;;
		;and the saved cycle is used for these
		ldy Bullet;Tmp
		sty ENABL
		;;;;;;;;;;;;;
.DivideLoopGRP1
	sbc #15	;subtract 15
	bcs .DivideLoopGRP1	;branch until negative
	eor #7	;calculate fine offset
	asl
	asl
	asl
	asl
	sta RESP1	;fix coarse position
	sta HMP1
endPositionGRP1

	sta WSYNC
	inx
	DRAWBALL_MACRO2

definePointers
	ldy CursorRowInvaders
	lda TableColorInvadersLow,y
	sta PntrColorGRPLow
	lda ArrayPointerGRP0Line0,y
	sta PointerGRP0Low
	lda ArrayPointerGRP1Line0,y ;this variable can have ghost pointer
	sta PointerGRP1Low

	;;;;;;;
	sta WSYNC	;sync w/ scanline
	sta HMOVE	;apply fine offsets

	inx
	DRAWBALL_MACRO2

	ldy #0 ;parameter (GRP0) for DRAW_GRP0_GRP1_MACRO

drawInvader
	inx ;anticipate for the WSYNC inside DRAW_GRP0_GRP1_MACR

	DRAWBALL_WITHOUT_STA_MACRO2

	DRAW_GRP0_GRP1_MACRO ;write ENABL inside

	cpy #HeightInvader
	bne drawInvader

	inc CursorRowInvaders
	lda CursorRowInvaders
	cmp #5
	beq positionGRP1Missile2
	jmp setInvaders

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
positionGRP1Missile2
	inx
	DRAWBALL_WITHOUT_STA_MACRO3
	lda CoordXMissile2 ;between #0 and #14 cannot be set, because ldy Bullet etc...
	sec
	sta WSYNC ;start a new line
		;one cycle of .DivideLoopGRP0 is saved
		sbc #15
		;;;;;;;;;;;;;
		;and the saved cycle is used for these
		ldy Bullet
		sty ENABL
		;;;;;;;;;;;;;
.DivideLoopGRP1Missile2
	sbc #15	;subtract 15
	bcs .DivideLoopGRP1Missile2	;branch until negative
	eor #7	;calculate fine offset
	asl
	asl
	asl
	asl
	sta RESP1	;set position
	sta HMP1

endPositionGRP1Missile2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
preEmptySpace
	inx
	sta WSYNC
	sta HMOVE ;necessary for GRP1Missile2
	;inx

	DRAWBALL_MACRO2

	lda #0
	sta NUSIZ1

	;the color of GRP1Missile2 and Missile1 is setted by last color of fifth invader
collisionDetectP0P1BL
	ora CXP1FB
	ora CXP0FB
	;and #%01000000 ;mask used in FIND_HIT_INVADER_MACRO for save cycles here
	sta CollisionInvader
	sta CXCLR

	ldy CoordYMissile1
	lda CoordYMissile2
	sta CursorYMissile2
	;if no barries, delete all until emptySpace
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;ball grp1-missile2 missile1 all togheter
	;prepare barriers!
preShowBarriers
	inx
	stx TempX
	DRAWBALL_WITHOUT_STA_MACRO2
	sta WSYNC
	sta ENABL
	lda PlayfieldPlanet,y
	sta ENAM1
	ldx CursorYMissile2
	lda PlayfieldPlanet,x
	and #%00000010
	sta GRP1
	;define triple copy and color of Barriers
	lda #RedBarriers
	sta COLUP0
	lda KindOfBarriers
	sta NUSIZ0
	;triple copy and color of Barriers
	dec CursorYMissile2
	dey
	ldx TempX
	cpx #PreBarriers
	bne preShowBarriers
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;ball grp1-missile2 missile1 all togheter
	;draw barriers!
showBarriers
	inx
	stx TempX
	DRAWBALL_WITHOUT_STA_MACRO2
	sta WSYNC
	sta ENABL
	lda PlayfieldPlanet,y
	sta ENAM1
	ldx CursorYMissile2
	lda PlayfieldPlanet,x
	and #%00000010
	sta GRP1

	lda LevelBarriers
	sta ENAM0
	lsr LevelBarriers

	dec CursorYMissile2
	dey
	ldx TempX
	cpx #EndBarriers
	bne showBarriers

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;ball grp1-missile2 missile1 all togheter
emptySpace
	inx
	stx TempX
	DRAWBALL_WITHOUT_STA_MACRO2
	sta WSYNC
	sta ENABL
	lda PlayfieldPlanet,y
	sta ENAM1
	ldx CursorYMissile2
	lda PlayfieldPlanet,x
	and #%00000010
	sta GRP1

	dec CursorYMissile2
	dey
	ldx TempX
	cpx #StartSpaceShip
	bne emptySpace

	;define missile1
	lda PlayfieldPlanet,y
	sta Tmp
	;define missile2
	ldx CursorYMissile2
	lda PlayfieldPlanet,x
	and #%00000010
	sta Temp ;used in the POSITIONING_GRP0_MACRO2

	;reset the Missile0/Barriers one copy for the spaceship
	lda #0
	sta NUSIZ0

	lda CoordXSpaceShip
	sta HMCLR
	POSITIONING_GRP0_MACRO2
;X is not necessary anymore
	dey
	sta WSYNC
	sta HMOVE

	;define missile1
	;dey ;above
	lda PlayfieldPlanet,y
	sta ENAM1
	;define missile2
	dec CursorYMissile2
	ldx CursorYMissile2
	lda PlayfieldPlanet,x
	and #%00000010
	sta GRP1

;pre missiles calculation
	lda #14 ;counter for the spaceship
	sta TempX

	dey
	lda PlayfieldPlanet,y
	sta Tmp

	dec CursorYMissile2
	ldx CursorYMissile2
	lda PlayfieldPlanet,x
	and #%00000010
	tax ;sta GRP1**

	sty CursorYMissile1

	ldy #0
	sty ENABL

drawSpaceShip
	;DRAW_GRP0_SPACESHIP_MACRO
	lda Tmp
	sta WSYNC
	sta ENAM1
	stx GRP1 ;**
	lda (PointerSpaceShipLow),y
	sta GRP0
	lda ColorSpaceShip,y
	sta COLUP0
	iny

	dec CursorYMissile1
	ldx CursorYMissile1
	lda PlayfieldPlanet,x
	sta Tmp

	dec CursorYMissile2
	ldx CursorYMissile2
	lda PlayfieldPlanet,x
	and #%00000010
	tax ;used for stx GRP1**

	dec TempX
	;lda TempX
	bne drawSpaceShip

	;tun off missile1 and grp1-missileGFX
	ldx #0
	stx ENAM1
	stx GRP1

changeColorEnergyCounterWhenOneIsLost
	lda #ColorEnergyCounter
	ldy BooleanShieldLost
	beq noLost
	lda #ColorEnergyCounterWhenOneIsLost ;#0
	;ldx #0 ;done above
	stx BooleanShieldLost
noLost
	sta COLUP0
	sta COLUP1

	POSITIONING_ENERGY_COUNTER_MACRO
	DEF_NUMBERS_POINTERS_MACRO

;DRAWING THE PLANET
horizonPlanet
	sta WSYNC
	lda #ColorOrizonPlanet
	sta COLUBK

setParametersPlanet
	sta WSYNC
	lda #ColorPlanet
	sta COLUBK
	lda #ColorLandPlanet
	sta COLUPF

	lda PointerGFXPlanet
	sbc #2
	and #%01111111
	sta Temp
LoopDrawPlanet

	ldy PointerGFXPlanet

	sta WSYNC
	lda PlayfieldPlanet,y
	sta PF0
	iny
	lda PlayfieldPlanet,y
	sta PF1
	iny
	tya
	and #%01111111
	sta PointerGFXPlanet

	SHOW_ENERGY_MACRO
finalLoop
	ldy PointerGFXPlanet

	sta WSYNC
	lda PlayfieldPlanet,y
	sta PF0
	iny
	lda PlayfieldPlanet,y
	sta PF1
	iny
	tya
	and #%01111111
	sta PointerGFXPlanet

	inx
	cpx #192
	bne finalLoop

	lda Temp
	sta PointerGFXPlanet

; 30 lines of overscan
LVOver
	;sta WSYNC
	lda #35 ;30 lines x 76 cycles per line = 2280 cycles / 64 = 35
	sta TIM64T
	sta WSYNC

; Reenable VBLANK for below (and top of next frame)
	lda #2
	sta VBLANK
Finale
	lda #0
	sta PF0
	sta PF1
	sta PF2
	sta COLUBK
	sta ENAM1
	sta GRP0
	sta GRP1
	sta NUSIZ1
	;sta ENABL
	sta Bullet

setColorBall
	;color ball/missile of SpaceShip
	lda #ColorBall
	sta COLUPF

;check all the collisions between barriers-missile0 and missile1, grp1, ball
collisionBarriersMissile1
	lda #%01000000
	and CXPPMM ;M0M1
	beq collisionBarriersMissile2
	lda #140
	sta CoordYMissile1
	dec PowerSingleBarrier ;every single line of the  barrier has N power
	bne collisionBarriersMissile2 ;if it becomes 0
	jsr DecreaseBarrier

collisionBarriersMissile2
	lda #%10000000
	and CXM0P ;M0P1
	beq collisionBarriersBall
	lda #140
	sta CoordYMissile2
	dec PowerSingleBarrier
	bne preCheck
	jsr DecreaseBarrier

collisionBarriersBall
	lda #%01000000
	and CXM0FB ;M0BL
	beq preCheck
	jsr ResetBallMissileGRP0

;check collision between grp0 and missile 1, grp1
preCheck
	lda ShieldNumber
	beq soundEffect ;necessary when game is over for no sound
collisionMissile1
	lda #%10000000
	and CXM1P ;M1P0
	beq collisionMissile2
	dec ShieldNumber
	sta BooleanShieldLost
	;reset missile1 position
	lda #140
	sta CoordYMissile1
collisionMissile2
	lda #%10000000
	and CXPPMM ;P0P1
	beq soundEffect
	dec ShieldNumber
	sta BooleanShieldLost
	;reset missile2 position
	lda #140
	sta CoordYMissile2

soundEffect
	PLAY_SOUND_MACRO

setBarriers
	lda DefineBarriers
	sta LevelBarriers ;necessary for to draw the barriers in the next frame

setDifficult
	;alternate speed ball/missile SpaceShip
	ldx #1
	lda LevelNumber
	and #%00000001
	beq .slowBullet
	ldx #2
.slowBullet
	stx StepBall

.setAlternateBarriers
	ldx #$36
	lda LevelNumber
	and #%00000001
	beq .storeBarriers
.twoBarriers
	ldx #$34
.storeBarriers
	stx KindOfBarriers

.moveBarriers
	lda LevelNumber
	cmp #4 ;from level 5, the barriers begin to move
	bmi LoopaOverscan
	jsr MoveLeftRight

LoopaOverscan
	lda INTIM
	bne LoopaOverscan
; Go back and do another frame
	jmp NextFrame

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Display the name of the game and the victory message
drawLogo
	lda INTIM
	bne drawLogo
	; Disable VBLANK
	lda #$0
	sta VBLANK
	ldy #55
deltaFrameUp
	sta WSYNC
	dey
	bne deltaFrameUp

	lda #3
	sta NUSIZ0
	sta NUSIZ1	; both players have 3 copies
	;lda #1
	sta VDELP0
	sta VDELP1
	lda #59
	ldy #0
	jsr PositionElement ;position GRP0

	lda #67
	ldy #1
	jsr PositionElement ;position GRP1

	sta WSYNC
	sta HMOVE

	lda #33 ;logo dimension
	sta Temp
	;if game over the logo is showen, otherwhise the victory message
	lda LevelNumber
	cmp #LastLevelEndGame
	beq .drawLoopVictoryMessage

.drawLoopLogo
	ldy Temp ;counts backwards
	lda logo_5,y ;6th
	sta Tmp

	sta WSYNC
	lda #ColorLogo
	sta COLUP0
	sta COLUP1

	lda logo_0,y ;1st
	sta GRP0
	lda logo_1,y ;2nd
	sta GRP1
	lda logo_2,y ;3rd
	sta GRP0
	lda logo_4,y ;5th
	tax
	lda logo_3,y ;4th
	ldy Tmp
	sta GRP1 ;4th
	stx GRP0 ;5th
	sty GRP1 ;6th
	sta GRP0
	dec Temp ;go to next line
	bpl .drawLoopLogo ;repeat until < 0

	sta WSYNC
	lda #0
	sta AUDC0
	sta AUDF0
	jmp .afterLoop

.drawLoopVictoryMessage
	ldy Temp ;counts backwards
	lda final_5,y ;6th
	sta Tmp

	sta WSYNC
	lda #ColorEndGame
	sta COLUP0
	sta COLUP1

	lda final_0,y ;1st
	sta GRP0
	lda final_1,y ;2nd
	sta GRP1
	lda final_2,y ;3rd
	sta GRP0
	lda final_4,y ;5th
	tax
	lda final_3,y ;4th
	ldy Tmp
	sta GRP1 ;4th
	stx GRP0 ;5th
	sty GRP1 ;6th
	sta GRP0
	dec Temp ;go to next line
	bpl .drawLoopVictoryMessage ;repeat until < 0

	sta WSYNC

.afterLoop

	lda #0
	sta VDELP0
	sta VDELP1
	sta GRP0
	sta GRP1
	sta NUSIZ0
	sta NUSIZ1

	sta WSYNC
	lda LevelNumber
	cmp #LastLevelEndGame
	beq .preDeltraFrame ;if last level, fire button for start game is not listen
	;manage fire button for start new game
	lda #%10000000  ;Fire?
	bit INPT4
	bne .preDeltraFrame	
	;the game begins
	lda #0
	sta TimerTitleScreen
	sta BooleanAtBeginOfEveryLevel
	sta LevelNumber
	sta BooleanVictorySongCh0
	sta BooleanVictorySongCh1

.preDeltraFrame
	ldy #71
.deltaFrame
	sta WSYNC
	dey
	bne .deltaFrame
	jmp changeColorEnergyCounterWhenOneIsLost
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; SUBROUTINE
PositionElement
;ac is the X position 
;y is the graphic object
	sec
	sta WSYNC
	bit 0
.DivideLoop2
	sbc #15
	bcs .DivideLoop2
	eor #7
	asl
	asl
	asl
	asl
	sta RESP0,y	;fix coarse position
	sta HMP0,y
	rts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Reset Missile-Ball
ResetBallMissileGRP0
	lda #0
	sta CollisionInvader
	sta BooleanFireSpaceShip
	;reset array ball position
	lda #152
	sta CursorYBallSpaceShip
	rts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;SUBROUTINE Decrease hit barrier
DecreaseBarrier
	lda #EnergySingleBarrier ;the full enery value is restored for the next line
	sta PowerSingleBarrier
	;DefineBarriers    = lda 10101010
	;MaskDeleteBarrier = and 11111100
	;--------------------------------
	;DefineBarriers    = sta 10101000 now the barrier has 3 lines
	;MaskDeleteBarrier = asl 11111000
	;MaskDeleteBarrier = asl 11110000
	;next AND
	;DefineBarriers    = lda 10101010
	;MaskDeleteBarrier = and 11110000
	;--------------------------------
	;DefineBarriers    = sta 10100000 now the barrier has 2 lines
	lda DefineBarriers
	and MaskDeleteBarrier
	sta DefineBarriers
	asl MaskDeleteBarrier
	asl MaskDeleteBarrier
	rts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;SUBROUTINE called by PLAY_SOUND_MACRO even for play Invader March
SoundEffectCH0
	ldy CursorSound0
	;last 3 datas must be zero, so all the sounds stop
	lda (SoundMarchDataLow),y
	sta AUDC0
	iny
	lda (SoundMarchDataLow),y
	sta AUDF0
	iny
	lda (SoundMarchDataLow),y
	sta TempoCH0
	beq .endMarchSound
	iny
	sty CursorSound0
.endMarchSound
	rts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;SUBROUTINE called by PLAY_SOUND_MACRO
SoundEffectCH1
	ldy CursorSound1
	;last 3 datas must be zero, so all the sounds stop
	lda (SoundDataLow),y
	sta AUDC1
	iny
	lda (SoundDataLow),y
	sta AUDF1
	iny
	lda (SoundDataLow),y
	sta TempoCH1
	beq .endSound
	iny
	sty CursorSound1
.endSound
	rts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;SUBROUTINE
MoveLeftRight
	lda TimerForAll
	and #%00011111
	bne .endSpring
	clc
	lda CoordXBarries
	adc Direction ;it can be 1 or -1
	sta CoordXBarries

.checkLeftLimit
	;lda CoordXBarries
	cmp #LeftLimitBarriers
	bne .checkRightLimit
	lda #$01
	sta Direction ;it becomes 1
	jmp .endSpring
.checkRightLimit
	lda CoordXBarries
	cmp #RightLimitBarriers
	bne .endSpring
	lda #$ff
	sta Direction ;it becomes -1
.endSpring
	rts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;SoundFX
InvadersMarch
	.byte $0a,$0e,$0f,  $00,$00,$0f,  $0a,$10,$0f,  $00,$00,$0f,  $0a,$12,$0f,  $00,$00,$0f,  $0a,$13,$0f,  $00,$00,$0f
Fire
	.byte $08,$1f,$01,  $08,$1d,$01,  $08,$1a,$01,  $08,$09,$01,  $08,$06,$01,  $00,$00,$00
InvaderExplosion
	.byte $0c,$05,$02,  $0c,$08,$02,  $0c,$0b,$02,  $0c,$14,$02,  $06,$01,$02,  $00,$00,$00
UfoHit
	.byte $04,$0d,$02,  $04,$0e,$02,  $04,$0f,$02,  $08,$04,$02,  $06,$09,$02,  $00,$00,$00
SpaceShipHit
	.byte $0c,$18,$01,  $0d,$03,$01,  $0c,$1a,$01,  $0d,$04,$01,  $0c,$1c,$01,  $0d,$05,$01
	.byte $0c,$19,$01,  $0d,$06,$01,  $0c,$1b,$01,  $0d,$07,$01,  $00,$00,$00
VictorySongCh0
	.byte 0,  0,  80
	.byte 12, 11, 92
	.byte 0,  0,  28
	.byte 12, 11, 120
	.byte 0,  0,  28
	.byte 6,  13, 30,   6, 14, 30,   6, 16, 30
	.byte 6,  13, 92
	.byte 0,0,0
VictorySongCh1
	.byte 0,  0,  60
	.byte 12, 23, 8,   8, 19, 2
	.byte 12, 20, 8,   8, 19, 2
	.byte 12, 23, 8,   8, 19, 2

	.byte 6, 13, 30,   6, 14, 30,   6, 16, 30

	.byte 12, 23, 8,   8, 19, 2
	.byte 12, 20, 8,   8, 19, 2
	.byte 12, 23, 8,   8, 19, 2

	.byte 6, 13, 30,   6, 14, 30,   6, 16, 30

	.byte 12, 11, 8,   8, 19, 2
	.byte 4,  31, 8,   8, 19, 2
	.byte 12, 11, 8,   8, 19, 2

	.byte 4, 31, 60,  4,  26, 30,   4, 23, 30,  4,  26, 90
	.byte 8, 19, 5,   $0, $0, $5,   8, 19, 5,   $0, $0, $5,   8, 19, 5,   $0, $0, $5,   8, 31, 5 ;final drums
	.byte 0,0,0

;;;;;;;;;;;;;;;;;;;;;;;;;;
SpaceShip0
	.byte $10 ; |   X    |
	.byte $10 ; |   X    |
	.byte $38 ; |  XXX   |
	.byte $38 ; |  XXX   |
	.byte $38 ; |  XXX   |
	.byte $BA ; |X XXX X |
	.byte $EE ; |XXX XXX |
	.byte $AA ; |X X X X |
	.byte $FE ; |XXXXXXX |
	.byte $FE ; |XXXXXXX |
	.byte $BA ; |X XXX X |
	.byte $38 ; |  XXX   |
	.byte $10 ; |   X    |
	.byte $00 ; |        |
SpaceShip1
	.byte $10 ; |   X    |
	.byte $10 ; |   X    |
	.byte $38 ; |  XXX   |
	.byte $38 ; |  XXX   |
	.byte $38 ; |  XXX   |
	.byte $BA ; |X XXX X |
	.byte $EE ; |XXX XXX |
	.byte $AA ; |X X X X |
	.byte $FE ; |XXXXXXX |
	.byte $FE ; |XXXXXXX |
	.byte $BA ; |X XXX X |
	.byte $92 ; |X  X  X |
	.byte $00 ; |        |
	.byte $00 ; |        |
ColorSpaceShip
	.byte $26
	.byte $28
	.byte $b2
	.byte $b4
	.byte $b4
	.byte $b4
	.byte $b4
	.byte $b4
	.byte $b4
	.byte $08
	.byte $64
	.byte $62
	.byte $62
	.byte $00

Ufo
	.byte $18 ; |   XX   |
	.byte $2C ; |  X XX  |
	.byte $5E ; | X XXXX |
	.byte $FF ; |XXXXXXXX|
	.byte $FF ; |XXXXXXXX|
	.byte $3C ; |  XXXX  |
	.byte $00 ; |        |
ColorUfo
	.byte $0e
	.byte $0e
	.byte $0e
	.byte $d4
	.byte $d2
	.byte $b6
	.byte $00

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
Shield0
	.byte $00 ; |        |
	.byte $D1 ; |XX X   X|
	.byte $90 ; |X  X    |
	.byte $D1 ; |XX X   X|
	.byte $5D ; | X XXX X|
	.byte $55 ; | X X X X|
	.byte $D5 ; |XX X X X|
Shield1
	.byte $08 ; |    X   |
	.byte $09 ; |    X  X|
	.byte $69 ; | XX X  X|
	.byte $69 ; | XX X  X|
	.byte $6B ; | XX X XX|
	.byte $4B ; | X  X XX|
	.byte $6B ; | XX X XX|
Number0
	.byte $7E ; | XXXXXX |
	.byte $66 ; | XX  XX |
	.byte $66 ; | XX  XX |
	.byte $66 ; | XX  XX |
	.byte $66 ; | XX  XX |
	.byte $66 ; | XX  XX |
	.byte $7E ; | XXXXXX |
Number1
	.byte $38 ; |  XXX   |
	.byte $18 ; |   XX   |
	.byte $18 ; |   XX   |
	.byte $18 ; |   XX   |
	.byte $18 ; |   XX   |
	.byte $18 ; |   XX   |
	.byte $7E ; | XXXXXX |
Number2
	.byte $7E ; | XXXXXX |
	.byte $06 ; |     XX |
	.byte $06 ; |     XX |
	.byte $7E ; | XXXXXX |
	.byte $60 ; | XX     |
	.byte $60 ; | XX     |
	.byte $7E ; | XXXXXX |
Number3
	.byte $7E ; | XXXXXX |
	.byte $06 ; |     XX |
	.byte $06 ; |     XX |
	.byte $1E ; |   XXXX |
	.byte $06 ; |     XX |
	.byte $06 ; |     XX |
	.byte $7E ; | XXXXXX |
Number4
	.byte $60 ; | XX     |
	.byte $66 ; | XX  XX |
	.byte $66 ; | XX  XX |
	.byte $7E ; | XXXXXX |
	.byte $06 ; |     XX |
	.byte $06 ; |     XX |
	.byte $06 ; |     XX |
Number5
	.byte $7E ; | XXXXXX |
	.byte $60 ; | XX     |
	.byte $60 ; | XX     |
	.byte $7E ; | XXXXXX |
	.byte $06 ; |     XX |
	.byte $06 ; |     XX |
	.byte $7E ; | XXXXXX |

;;;;;;;;;;;;;;;;;;;
	align $100
final_0
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00001000
	.byte %00001000
	.byte %00001000
	.byte %00001110
	.byte %00001010
	.byte %00001010
	.byte %00001010
	.byte %00001110
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %01110111
	.byte %00010101
	.byte %00010101
	.byte %01110101
	.byte %01010101
	.byte %01010101
	.byte %01010101
	.byte %01010111
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %11101010
	.byte %10101010
	.byte %10101010
	.byte %10101100
	.byte %11001110
	.byte %10101010
	.byte %10101010
	.byte %11101110

final_1
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %11101010
	.byte %10001010
	.byte %10001010
	.byte %10001110
	.byte %10001010
	.byte %10001010
	.byte %10001010
	.byte %10001110
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %01110011
	.byte %01010000
	.byte %01010000
	.byte %01010000
	.byte %01010011
	.byte %01010010
	.byte %01010010
	.byte %01010011
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %10100100
	.byte %10101010
	.byte %10101010
	.byte %10101010
	.byte %11101010
	.byte %10101010
	.byte %10101010
	.byte %11101010

final_2
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %10101110
	.byte %10101000
	.byte %10101000
	.byte %10101000
	.byte %10101100
	.byte %10101000
	.byte %10101000
	.byte %11101110
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %10101001
	.byte %10101010
	.byte %10101010
	.byte %10101010
	.byte %10111010
	.byte %00101010
	.byte %00101010
	.byte %10111010
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %11100111
	.byte %10100100
	.byte %10100100
	.byte %10100100
	.byte %10100100
	.byte %10100100
	.byte %10100100
	.byte %11100100

final_3
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %01000111
	.byte %01000100
	.byte %01000010
	.byte %01000010
	.byte %01000001
	.byte %01000001
	.byte %01000000
	.byte %11100111
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00111011
	.byte %10100010
	.byte %10100010
	.byte %10100010
	.byte %10110010
	.byte %10100010
	.byte %10100010
	.byte %10111011
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %01000101
	.byte %01000101
	.byte %01000101
	.byte %01000101
	.byte %01000111
	.byte %01000101
	.byte %01000101
	.byte %11100101

final_4
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %10100010
	.byte %00100010
	.byte %00100010
	.byte %00100010
	.byte %00111011
	.byte %00101010
	.byte %10101010
	.byte %10111010
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00001001
	.byte %10001001
	.byte %10001001
	.byte %10001001
	.byte %10001001
	.byte %10001001
	.byte %10001001
	.byte %00011101
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %01110111
	.byte %01010101
	.byte %01010101
	.byte %01010101
	.byte %01010100
	.byte %01010100
	.byte %01010100
	.byte %01110111

final_5
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %10100000
	.byte %10000000
	.byte %10100000
	.byte %10100000
	.byte %10100000
	.byte %10100000
	.byte %10100000
	.byte %10100000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %01011100
	.byte %01010000
	.byte %01010000
	.byte %01010000
	.byte %11011000
	.byte %01010000
	.byte %01010000
	.byte %01011100
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %01010101
	.byte %01010101
	.byte %01010101
	.byte %01010101
	.byte %01110101
	.byte %01010101
	.byte %01010101
	.byte %01110111
;;;;;;;;;;;;;;;;;;;;
;TITLE GAME
	align $100
logo_0
	.byte %11101110
	.byte %10100010
	.byte %11101110
	.byte %10001010
	.byte %10001010
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000010
	.byte %00000010
	.byte %00000010
	.byte %00000010
	.byte %00000010
	.byte %00000011
	.byte %00000010
	.byte %00000010
	.byte %00000010
	.byte %00000010
	.byte %00000011
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %10101010
	.byte %10101011
	.byte %10101010
	.byte %10101010
	.byte %10110010
	.byte %10000010
	.byte %10000010
	.byte %10000100
logo_1
	.byte %01110101
	.byte %01000100
	.byte %01000101
	.byte %01000101
	.byte %01110101
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %10101011
	.byte %10101010
	.byte %10101010
	.byte %10101010
	.byte %10101010
	.byte %10101010
	.byte %10101010
	.byte %10101010
	.byte %10101010
	.byte %10101010
	.byte %10110011
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00011101
	.byte %00010101
	.byte %10011101
	.byte %10000101
	.byte %10011000
	.byte %01000000
	.byte %00000000
	.byte %00000000
logo_2
	.byte %11010101
	.byte %01010101
	.byte %11011101
	.byte %00010101
	.byte %11011101
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00101011
	.byte %10101010
	.byte %10101010
	.byte %10101010
	.byte %10101010
	.byte %10110010
	.byte %10101010
	.byte %10101010
	.byte %10101010
	.byte %10101010
	.byte %00110011
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %11011101
	.byte %01010001
	.byte %01011101
	.byte %11010101
	.byte %01001100
	.byte %01000000
	.byte %01000000
	.byte %01000000
logo_3
	.byte %01011100
	.byte %01010100
	.byte %01010100
	.byte %01010100
	.byte %11011100
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %10101010
	.byte %10101010
	.byte %10101010
	.byte %10101010
	.byte %10101010
	.byte %10101010
	.byte %10101010
	.byte %10101010
	.byte %10101100
	.byte %10111000
	.byte %10100000
	.byte %00000001
	.byte %00000000
	.byte %00000000
	.byte %00011100
	.byte %00000100
	.byte %00011100
	.byte %00010000
	.byte %11001100
	.byte %00000000
	.byte %00000000
	.byte %00000000
logo_4
	.byte %01110111
	.byte %01000101
	.byte %01110101
	.byte %00010101
	.byte %01110111
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %11101100
	.byte %10001010
	.byte %10001010
	.byte %10001010
	.byte %10001010
	.byte %10001010
	.byte %11001010
	.byte %10001010
	.byte %10001010
	.byte %01101010
	.byte %00001100
	.byte %00000000
	.byte %10000000
	.byte %10000000
	.byte %10010001
	.byte %10010001
	.byte %10010001
	.byte %10010001
	.byte %11001100
	.byte %10000000
	.byte %10000000
	.byte %11100000
logo_5
	.byte %01110111
	.byte %01000100
	.byte %01110111
	.byte %00010001
	.byte %01110111
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %10100000
	.byte %10100000
	.byte %10100000
	.byte %10100000
	.byte %10100000
	.byte %11100000
	.byte %10100000
	.byte %10100000
	.byte %10100000
	.byte %10100000
	.byte %11100000
	.byte %00000000
	.byte %00000001
	.byte %00000001
	.byte %10010101
	.byte %01010101
	.byte %01010101
	.byte %01010101
	.byte %11011110
	.byte %00010000
	.byte %00000000
	.byte %00000000

;*************************************************
;PLAYFIELD of PLANET
PlayfieldPlanet
	.byte $80,$80 ;|   XX               | (  0)
	.byte $80,$88 ;|   XX   X           | (  1)
	.byte $C0,$08 ;|  XX    X           | (  2)
	.byte $C0,$18 ;|  XX   XX           | (  3)
	.byte $00,$18 ;|       XX           | (  4)
	.byte $00,$3C ;|      XXXX          | (  5)
	.byte $00,$3C ;|      XXXX          | (  6)
	.byte $00,$20 ;|      X             | (  7)
	.byte $00,$01 ;|           X        | (  8)
	.byte $00,$01 ;|           X        | (  9)
	.byte $00,$41 ;|     X     X        | ( 10)
	.byte $10,$41 ;|X    X     X        | ( 11)
	.byte $10,$49 ;|X    X  X  X        | ( 12)
	.byte $10,$69 ;|X    XX X  X        | ( 13)
	.byte $10,$E9 ;|X   XXX X  X        | ( 14)
	.byte $10,$C9 ;|X   XX  X  X        | ( 15)
	.byte $10,$88 ;|X   X   X           | ( 16)
	.byte $50,$08 ;|X X     X           | ( 17)
	.byte $50,$08 ;|X X     X           | ( 18)
	.byte $50,$08 ;|X X     X           | ( 19)
	.byte $70,$08 ;|XXX     X           | ( 20)
	.byte $70,$0C ;|XXX     XX          | ( 21)
	.byte $F0,$0C ;|XXXX    XX          | ( 22)
	.byte $F0,$9C ;|XXXXX  XXX          | ( 23)
	.byte $F0,$DC ;|XXXXXX XXX          | ( 24)
	.byte $F0,$DC ;|XXXXXX XXX          | ( 25)
	.byte $F0,$9C ;|XXXXX  XXX          | ( 26)
	.byte $70,$1C ;|XXX    XXX          | ( 27)
	.byte $30,$3C ;|XX    XXXX          | ( 28)
	.byte $10,$3C ;|X     XXXX          | ( 29)
	.byte $00,$3F ;|      XXXXXX        | ( 30) ;missile
	.byte $00,$3F ;|      XXXXXX        | ( 31) ;missile
	.byte $00,$3F ;|      XXXXXX        | ( 32) ;missile
	.byte $00,$3F ;|      XXXXXX        | ( 33) ;missile
	.byte $00,$7F ;|     XXXXXXX        | ( 34) ;missile
	.byte $00,$7C ;|     XXXXX          | ( 35)
	.byte $00,$7C ;|     XXXXX          | ( 36)
	.byte $00,$F8 ;|    XXXXX           | ( 37)
	.byte $00,$F0 ;|    XXXX            | ( 39)
	.byte $00,$E0 ;|    XXX             | ( 40)
	.byte $80,$C0 ;|   XXX              | ( 41)
	.byte $C0,$80 ;|  XXX               | ( 42)
	.byte $C0,$00 ;|  XX                | ( 43)
	.byte $00,$00 ;|                    | ( 44)
	.byte $00,$00 ;|                    | ( 45)
	.byte $00,$00 ;|                    | ( 46)
	.byte $00,$00 ;|                    | ( 47)
	.byte $20,$00 ;| X                  | ( 48)
	.byte $20,$00 ;| X                  | ( 49)
	.byte $60,$00 ;| XX                 | ( 50)
	.byte $F0,$00 ;|XXXX                | ( 51)
	.byte $70,$00 ;|XXX                 | ( 52)
	.byte $30,$00 ;|XX                  | ( 53)
	.byte $30,$00 ;|XX                  | ( 54)
	.byte $00,$00 ;|                    | ( 55)
	.byte $00,$00 ;|                    | ( 56)
	.byte $00,$00 ;|                    | ( 57)
	.byte $00,$00 ;|                    | ( 58)
	.byte $00,$00 ;|                    | ( 59)
	.byte $80,$00 ;|   X                | ( 60)
	.byte $80,$00 ;|   X                | ( 61)
	.byte $80,$00 ;|   X                | ( 62)
	.byte $80,$00 ;|   X                | ( 63)
	.byte $80,$00 ;|   X                | ( 64)
	.byte $80,$80 ;|   XX               | ( 65)
	.byte $C0,$80 ;|  XXX               | ( 66)
	.byte $C0,$80 ;|  XXX               | ( 67)
	.byte $C0,$A0 ;|  XXX X             | ( 68)
	.byte $C0,$A0 ;|  XXX X             | ( 69)
	.byte $C0,$A0 ;|  XXX X             | ( 70)
	.byte $C0,$B0 ;|  XXX XX            | ( 71)
	.byte $E0,$F0 ;| XXXXXXX            | ( 72)
	.byte $E0,$F8 ;| XXXXXXXX           | ( 73)
	.byte $E0,$F0 ;| XXXXXXX            | ( 74)
;*************************************************
	
	org $fffc
	.word Start
	.word Start
